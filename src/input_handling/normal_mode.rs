use std::collections::HashMap;

use lazy_static::lazy_static;

use crate::{
    app::{editor::motions::Motion, InputMode},
    commands::Command,
};

use super::Keymap;

lazy_static! {
    pub static ref NORMAL_MAP: HashMap<String, Keymap> = {
        HashMap::from([
            (
                ":".into(),
                Keymap::One(vec![Command::ChangeInputMode(InputMode::Command)]),
            ),
            (
                "i".into(),
                Keymap::One(vec![Command::ChangeInputMode(InputMode::Insert)]),
            ),
            (
                "a".into(),
                Keymap::One(vec![
                    Command::ChangeInputMode(InputMode::Insert),
                    Command::EditorMove(Motion::CharForward),
                ]),
            ),
            (
                "W".into(),
                Keymap::One(vec![Command::EditorMove(Motion::NextWordProperStart)]),
            ),
            (
                "w".into(),
                Keymap::One(vec![Command::EditorMove(Motion::NextWordStart)]),
            ),
            (
                "E".into(),
                Keymap::One(vec![Command::EditorMove(Motion::NextWordProperEnd)]),
            ),
            (
                "e".into(),
                Keymap::One(vec![Command::EditorMove(Motion::NextWordEnd)]),
            ),
            (
                "B".into(),
                Keymap::One(vec![Command::EditorMove(Motion::LastWordProperStart)]),
            ),
            (
                "b".into(),
                Keymap::One(vec![Command::EditorMove(Motion::LastWordStart)]),
            ),
            (
                "g".into(),
                Keymap::Many(HashMap::from([
                    (
                        "e".into(),
                        Keymap::One(vec![Command::EditorMove(Motion::LastWordEnd)]),
                    ),
                    (
                        "E".into(),
                        Keymap::One(vec![Command::EditorMove(Motion::LastWordProperEnd)]),
                    ),
                ])),
            ),
            (
                "$".into(),
                Keymap::One(vec![Command::EditorMove(Motion::LineEnd)]),
            ),
            (
                "0".into(),
                Keymap::One(vec![Command::EditorMove(Motion::LineStart)]),
            ),
            (
                "d".into(),
                Keymap::Many(HashMap::from([
                    (
                        "W".into(),
                        Keymap::One(vec![Command::EditorDelete(Motion::NextWordProperStart)]),
                    ),
                    (
                        "w".into(),
                        Keymap::One(vec![Command::EditorDelete(Motion::NextWordStart)]),
                    ),
                    (
                        "E".into(),
                        Keymap::One(vec![Command::EditorDelete(Motion::NextWordProperEnd)]),
                    ),
                    (
                        "e".into(),
                        Keymap::One(vec![Command::EditorDelete(Motion::NextWordEnd)]),
                    ),
                    (
                        "B".into(),
                        Keymap::One(vec![Command::EditorDelete(Motion::LastWordProperStart)]),
                    ),
                    (
                        "b".into(),
                        Keymap::One(vec![Command::EditorDelete(Motion::LastWordStart)]),
                    ),
                    (
                        "g".into(),
                        Keymap::Many(HashMap::from([
                            (
                                "e".into(),
                                Keymap::One(vec![Command::EditorDelete(Motion::LastWordEnd)]),
                            ),
                            (
                                "E".into(),
                                Keymap::One(vec![Command::EditorDelete(Motion::LastWordProperEnd)]),
                            ),
                        ])),
                    ),
                    (
                        "$".into(),
                        Keymap::One(vec![
                            Command::EditorInsert("\n".into()),
                            Command::EditorDelete(Motion::NextLineStart),
                        ]),
                    ),
                    (
                        "0".into(),
                        Keymap::One(vec![Command::EditorDelete(Motion::LineStart)]),
                    ),
                ])),
            ),
            (
                "l".into(),
                Keymap::One(vec![Command::EditorMove(Motion::CharForward)]),
            ),
        ])
    };
}
